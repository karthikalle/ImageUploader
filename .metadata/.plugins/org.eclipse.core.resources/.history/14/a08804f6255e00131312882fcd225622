package dataEntryTesting;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.awt.Event;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.Action;
import javax.swing.JOptionPane;

import org.junit.Before;
import org.junit.Test;

import com.amazonaws.auth.PropertiesCredentials;
import com.amazonaws.services.simpledb.AmazonSimpleDB;
import com.amazonaws.services.simpledb.model.Item;
import com.amazonaws.services.simpledb.model.SelectRequest;
import com.amazonaws.services.simpledb.AmazonSimpleDBClient;

import dataEntry.DisplayExisting;
import dataEntry.FileChooser;
import dataEntry.GUI_DataEntry;
import junit.framework.Assert;
import junit.framework.TestCase;

public class DisplayExistingTest {
	
	public AmazonSimpleDB sdb;
	@Before
	public void setUp () {
		try{
	
		sdb = new AmazonSimpleDBClient(new PropertiesCredentials(
		        GUI_DataEntry.class.getResourceAsStream("AwsCredentials.properties")));
		}
		catch (Exception e){
			System.out.println(e);
		}
	}
	@Test
	public void testShowImageForReview() {
		GUI_DataEntry gde = new GUI_DataEntry();
		gde.word = "Cup";
		gde.categoryName = "NonLiving";
		gde.showDialogs = false;
		String selectExpression = "select * from `" + "mosswords" + "` where itemName() = '"+gde.word+"'";
	    SelectRequest selectRequest = new SelectRequest(selectExpression);
	
	    for(Item item: sdb.select(selectRequest).getItems()) {
	    	if(item.getName().equals(gde.word)) {
	    		gde.displayExisting = DisplayExisting.initialize(item);
	    			try {
	    			    Thread.sleep(2000);
	    			} catch(InterruptedException ex) {
	    			    Thread.currentThread().interrupt();
	    			}
	    	}
	    }
	}
	
	@Test
	public void testReplaceImage() {
		GUI_DataEntry gde = new GUI_DataEntry();
		gde.word = "Cup";
		gde.categoryName = "NonLiving";
		gde.frequency = "high";
		gde.frequency = "low";
		gde.showDialogs = false;
		String selectExpression = "select * from `" + "mosswords" + "` where itemName() = '"+gde.word+"'";
	    SelectRequest selectRequest = new SelectRequest(selectExpression);
	
	    for(Item item: sdb.select(selectRequest).getItems()) {
	    	if(item.getName().equals(gde.word)) {
	    		gde.displayExisting = DisplayExisting.initialize(item);
	    		gde.displayExisting.setVisible(false);
	    		gde.displayExisting.replaceButton.doClick();
	    		assertEquals(gde.flagValue,"Replace");
	    	}
	    }
	}
	
	@Test
	public void testUseExistingImage() {
		GUI_DataEntry gde = new GUI_DataEntry();
		gde.word = "Cup";
		gde.categoryName = "NonLiving";
		gde.frequency = "high";
		gde.frequency = "low";
		gde.showDialogs = false;
		String selectExpression = "select * from `" + "mosswords" + "` where itemName() = '"+gde.word+"'";
	    SelectRequest selectRequest = new SelectRequest(selectExpression);
	
	    for(Item item: sdb.select(selectRequest).getItems()) {
	    	if(item.getName().equals(gde.word)) {
	    		gde.displayExisting = DisplayExisting.initialize(item);
	    		gde.displayExisting.setVisible(false);
	    		gde.displayExisting.useExistingButton.doClick();
	    		assertEquals(gde.flagValue,"Use Existing");
	    		
	    	}
	    }
	}
	
	@Test
	public void testGetCategoryValue() {
		GUI_DataEntry gde = new GUI_DataEntry();
		String word = "Snake";
		String selectExpression = "select * from `" + "mosswords" + "` where itemName() = '"+word+"'";
	    SelectRequest selectRequest = new SelectRequest(selectExpression);
	
	    for(Item item: sdb.select(selectRequest).getItems()) {
	    	if(item.getName().equals(word)) {
	    		gde.displayExisting = DisplayExisting.initialize(item);
	    		gde.displayExisting.setVisible(false);

	    		assertEquals("Living",gde.displayExisting.getAttributeValue(item, "Category"));
	    	}
	    }
	}
	
	@Test
	public void testGetFrequencyValue() {
		String word = "Snake";
		
		String selectExpression = "select * from `" + "mosswords" + "` where itemName() = '"+word+"'";
	    SelectRequest selectRequest = new SelectRequest(selectExpression);
	
	    for(Item item: sdb.select(selectRequest).getItems()) {
	    	if(item.getName().equals(word)) {
	    		DisplayExisting de = DisplayExisting.initialize(item);
	    		de.setVisible(false);

	    		assertEquals("high",de.getAttributeValue(item, "Frequency"));
	    	}
	    }
	}
	
	@Test
	public void testGetImageabilityValue() {
		String word = "Snake";
		
		String selectExpression = "select * from `" + "mosswords" + "` where itemName() = '"+word+"'";
	    SelectRequest selectRequest = new SelectRequest(selectExpression);
	
	    for(Item item: sdb.select(selectRequest).getItems()) {
	    	if(item.getName().equals(word)) {
	    		DisplayExisting de = DisplayExisting.initialize(item);
	    		de.setVisible(false);

	    		assertEquals("high",de.getAttributeValue(item, "Imageability"));
	    	}
	    }
	}
	
	@Test
	public void testGetLevelValue() {
		String word = "Snake";
		
		String selectExpression = "select * from `" + "mosswords" + "` where itemName() = '"+word+"'";
	    SelectRequest selectRequest = new SelectRequest(selectExpression);
	
	    for(Item item: sdb.select(selectRequest).getItems()) {
	    	if(item.getName().equals(word)) {
	    		DisplayExisting de = DisplayExisting.initialize(item);
	    		de.setVisible(false);
	    		assertEquals("1",de.getAttributeValue(item, "Level"));
	    	}
	    }
	}
	
	@Test
	public void testGetURLValue() {
		String word = "Snake";
		
		String selectExpression = "select * from `" + "mosswords" + "` where itemName() = '"+word+"'";
	    SelectRequest selectRequest = new SelectRequest(selectExpression);
	
	    for(Item item: sdb.select(selectRequest).getItems()) {
	    	if(item.getName().equals(word)) {
	    		DisplayExisting de = DisplayExisting.initialize(item);
	    		de.setVisible(false);

	    		assertEquals("https://s3.amazonaws.com/mosswords/Images/Living/snake.jpg",
	    				de.getAttributeValue(item, "URL"));
	    	}
	    }
	}
	
	

}
