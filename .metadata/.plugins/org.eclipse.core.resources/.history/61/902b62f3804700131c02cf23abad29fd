import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextField;

public class FileChooser {

	private String filePath;
	private File file;
	private int f;
	private int IMG_WIDTH;
	private int IMG_HEIGHT;
	
	private JFileChooser fileChooser;
    private JPanel filePane;

    private JTextField fileField;
	
    public FileChooser(final FileAndPathOnly fp) {
    	f=0;
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {

                JFrame frame2 = new JFrame();
                frame2.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                frame2.setLayout(new BorderLayout());
                frame2.add(new MainPanel());
                frame2.setSize(800, 400);
                frame2.setLocationRelativeTo(null);
                frame2.setVisible(true);
                if(f==1) {
                	fp.setFilePath(filePath);
                	fp.setFile(file);
                	frame2.dispose();
                }
            }
        });

    }

    protected class MainPanel extends JPanel {

        public MainPanel() {

            setLayout(new BorderLayout());

            fileChooser = new JFileChooser();
            fileChooser.addPropertyChangeListener(new PropertyChangeListener() {

                @Override
                public void propertyChange(PropertyChangeEvent evt) {
                    if (evt.getPropertyName().equals("SelectedFileChangedProperty")) {
                        file = fileChooser.getSelectedFile();
                        if (file != null) {
                            setFile(file);
                        }
                    }
                }
            });

            add(fileChooser, BorderLayout.WEST);

            filePane = new JPanel(new GridBagLayout());
            GridBagConstraints gbc = new GridBagConstraints();
            gbc.gridx = 0;
            gbc.gridy = 0;
            gbc.weightx = 1;
            gbc.fill = GridBagConstraints.HORIZONTAL;

            fileField = new JTextField(10);
            filePane.add(fileField, gbc);
            
 /*           JButton closeButton = new JButton("Exit");
            
            closeButton.addActionListener(new ActionListener() {
    			public void actionPerformed(ActionEvent e) {
    				filePath = fileField.getText();
    				filePane.setVisible(false);
    			}
            });
            
            closeButton.setBounds(100, 100, 25, 20);
            filePane.add(closeButton); */
            add(filePane); 
            
            if(fileChooser.showSaveDialog(this)== JFileChooser.APPROVE_OPTION)
            	System.out.println(filePath);
            else if(fileChooser.showSaveDialog(this)== JFileChooser.CANCEL_OPTION)
            	System.out.println("Cancelled");
            f=1;
            
        }

    }

		protected void setFile(File file) {
            fileField.setText(file.getPath());
            filePath = fileField.getText();
            
        }

    
    public void reScaleImage(File file) {
    	try {
    		IMG_WIDTH=250;
    		IMG_HEIGHT=300;
			BufferedImage originalImage = ImageIO.read(file);
			BufferedImage resizedImage = new BufferedImage(IMG_WIDTH, IMG_HEIGHT, originalImage.getType());
			Graphics g = resizedImage.createGraphics();
			g.drawImage(originalImage, 0, 0, IMG_WIDTH, IMG_HEIGHT, null);
			g.dispose();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

    public File getFile() {
    	return file;
    }
    
	public String getFilePath() {
		return filePath;
	}
}